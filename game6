import pygame, simpleGE, random


class Finger(simpleGE.Sprite):
    def __init__(self,scene):
        super().__init__(scene)
        self.setImage("sukuna_Finger.png")
        self.setSize(50,50)
        self.top()
        
    def top(self):
        self.y = 5
        self.x = random.randint(0, self.screenWidth)
        self.dy = random.randint(3,8)
        if self.bottom > self.screenHeight:
            self.y = self.screenHeight
        
    def checkBounds(self):
        if self.bottom > self.screenHeight:
            self.top()
class Yuji(simpleGE.Sprite):
    def __init__(self, scene):
        super().__init__(scene)
        self.setImage("Yuji.png")
        self.setSize(125,125)
        self.position = (320,320)
        self.moveSpeed = 5
        
    def process(self):
        if self.isKeyPressed(pygame.K_LEFT):
            self.x -= self.moveSpeed
        if self.isKeyPressed(pygame.K_RIGHT):
            self.x += self.moveSpeed
        if self.isKeyPressed(pygame.K_a):
            self.x -= self.moveSpeed
        if self.isKeyPressed(pygame.K_d):
            self.x += self.moveSpeed
        

class lblScore(simpleGE.Label):
    def __init__(self):
        super().__init__()
        
        self.center = (540,40)
        self.text = "Score: "
        
        
class lblTimer(simpleGE.Label):
    def __init__(self):
        super().__init__()
        
        self.center = (100,40)
        self.text = "Time Left: "
        
class lblLastScore(simpleGE.Label):
    def __init__(self):
        super().__init__()
        
        self.center = (350,200)
        self.text = ""

class Instructions(simpleGE.Scene):
    def __init__(self, score):
        super().__init__()
        
        self.score = score
        
        self.setImage("Shibuya.png")
        
        self.response = "Quit"
        
        # to fix later
        self.instrlbl = simpleGE.MultiLabel()
        self.instrlbl.textLines = [
            "You play as Yuji Itadori,"
            "Your job is to catch fingers and become Sukuna",
            "use a and d or left and right arrows to move",
            "Catch as many fingers as you can in 15 seconds"
        ]
        
        self.instrlbl.center = (320,200)
        self.instrlbl.size = (400,250)
        
        self.btnPlay = simpleGE.Button()
        self.btnPlay.center = (140,360)
        self.btnPlay.text = "Play"
        
        self.btnQuit = simpleGE.Button()
        self.btnQuit.center = (350,360)
        self.btnQuit.text = "Quit"
        
        self.lastscore = lblLastScore()
        
        
        
        self.sprites = [self.instrlbl,
                        self.btnPlay,
                        self.btnQuit,
                        self.lastscore
                        ]
                
    def process(self):
        if self.btnPlay.clicked:
            self.reponse = "Play"
            game = Game()
            game.start()
            self.stop()
        
        if self.btnQuit.clicked:
            self.reponse = "Quit"
            self.stop()
            
        
        


class Game(simpleGE.Scene):
    def __init__(self):
        super().__init__()
        
        self.score = 0
        
        self.setImage("Shibuya.png")
        self.yuji = Yuji(self)
        self.finger = Finger(self)
        self.lblscore = lblScore()
        self.lbltime = lblTimer()
        
        self.timer = simpleGE.Timer()
        self.timer.totalTime = 15
        self.lbltime = lblTimer()
        

        
        self.fingers = []
        
        for i in range(8):
            self.fingers.append(Finger(self))
       
        self.sprites = [self.yuji,
                        self.fingers,
                        self.lblscore,
                        self.lbltime
                        ]
    def process(self):
        for finger in self.fingers:
            if self.yuji.collidesWith(finger):
                finger.top()
                self.score += 1
                self.lblscore.text = f"Score: {self.score}"
            
        self.lbltime.text = f"time left: {self.timer.getTimeLeft():.1f}"
        
        if self.timer.getTimeLeft() <= 0:
            self.stop()
            score = self.score
            intruct = Instructions(score)
            intruct.start()
def main():
    
    keepGoing = True
    score = 0
    while keepGoing:
        instructions = Instructions(score)
        instructions.start()
        if instructions.response == "Play":
            game = Game()
            game.start()
        else:
            keepGoing = False
    
if __name__ == "__main__":
    main()
